use image::{ImageBuffer, Rgb, RgbImage};
use rusttype::{point, Font, Scale};
use std::fs;

fn load_font() -> Font<'static> {
    let font_data = include_bytes!("../fonts/Roboto-Regular.ttf");
    Font::try_from_bytes(font_data as &[u8]).expect("Error constructing Font")
}

fn draw_text(img: &mut RgbImage, text: &str, x: u32, y: u32, font: &Font, scale: Scale) {
    let black = Rgb([0, 0, 0]);
    for glyph in font.layout(text, scale, point(x as f32, y as f32)) {
        if let Some(bounding_box) = glyph.pixel_bounding_box() {
            glyph.draw(|gx, gy, _v| {
                let px = bounding_box.min.x + gx as i32;
                let py = bounding_box.min.y + gy as i32;
                if px >= 0 && py >= 0 {
                    img.put_pixel(px as u32, py as u32, black);
                }
            })
        }
    }
}

fn create_layout(
    map_image_path: &str,
    territory_name: &str,
    territory_number: &str,
    output_path: &str,
) {
    // load map image
    let map_image = image::open(map_image_path).expect("Failed to open map image").to_rgb8();

    // set up layout dimension based on the map image
    let (width, height) = map_image.dimensions();
    let layout_height = height + 100;
    let mut layout = ImageBuffer::from_pixel(width, layout_height, Rgb([255, 255, 255]));

    // paste the map image onto the layout
    image::imageops::overlay(&mut layout, &map_image, 0, 100);

    // load font
    let font = load_font();
    let title_scale = Scale::uniform(24.0);
    let subtitle_scale = Scale::uniform(18.0);

    // draw title and subtitles
    let title_text = "Piantina di territorio";
    let subtitle_left = "Congregazione Roma Pratolungo";
    let subtitle_right = format!("ZONA {} N. {}", territory_name, territory_number);

    // center the title
    let title_x = (width / 2) - (title_text.len() as u32 * 7);
    draw_text(&mut layout, &title_text, title_x, 10, &font, title_scale);

    // Draw left subtitle
    draw_text(&mut layout, subtitle_left, 10, 50, &font, subtitle_scale);

    // Draw right subtitle
    let subtitle_right_x = width - (subtitle_right.len() as u32 * 10);
    draw_text(
        &mut layout,
        &subtitle_right,
        subtitle_right_x,
        50,
        &font,
        subtitle_scale,
    );

    // Save the final layout
    layout
        .save(output_path)
        .expect("Failed to save layout image");
    println!(
        "Saved layout for territory {} at {}",
        territory_number, output_path
    );
}

fn main() {
    let directory = "./images"; // Folder with map images
    let output_directory = "./layouts"; // Folder to save the final layouts
    fs::create_dir_all(output_directory).expect("Failed to create output directory");

    for entry in fs::read_dir(directory).expect("Failed to read directory") {
        if let Ok(entry) = entry {
            let path = entry.path();
            if path
                .extension()
                .and_then(|s| s.to_str())
                .map_or(false, |ext| ext == "png" || ext == "jpg" || ext == "jpeg")
            {
                let territory_number = path.file_stem().unwrap().to_str().unwrap(); // Get territory number from filename
                let territory_name = "Casal Monastero"; // Set the name dynamically if needed

                let map_image_path = path.to_str().unwrap();
                let output_path =
                    format!("{}/territory_{}.png", output_directory, territory_number);

                create_layout(
                    map_image_path,
                    territory_name,
                    territory_number,
                    &output_path,
                );
            }
        }
    }
}
